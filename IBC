use std::collections::HashMap;
trait SortByKey<K, V> {
    fn sort_by_key(&self) -> Vec<(&K, &V)>;
}
impl<K: Ord, V> SortByKey<K, V> for HashMap<K, V> {
    fn sort_by_key(&self) -> Vec<(&K, &V)> {
        let mut sorted_pairs: Vec<(&K, &V)> = self.iter().collect();
        sorted_pairs.sort_by(|(key1, _), (key2, _)| key1.cmp(key2));
        sorted_pairs
    }
}

fn main() {
    let mut my_map: HashMap<i32, &str> = HashMap::new();
    my_map.insert(3, "Apple");
    my_map.insert(1, "Banana");
    my_map.insert(2, "Orange");
    my_map.insert(5, "Grapes");
    my_map.insert(4, "Cherry");
    println!("Original Map: {:?}", my_map);
    let sorted_pairs = my_map.sort_by_key();
    println!("Sorted Map: {:?}", sorted_pairs);
}
